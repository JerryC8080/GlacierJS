"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const Rx = __importStar(require("rxjs"));
const operators_1 = require("rxjs/operators");
const chalk_1 = __importDefault(require("chalk"));
const semver_1 = __importDefault(require("semver"));
const constants_1 = require("../constants");
const pkgsDiff_1 = __importStar(require("./pkgsDiff"));
const outputConstants_1 = require("./outputConstants");
const CONFIG_BY_DEP_TYPE = {
    prod: 'production',
    dev: 'dev',
    optional: 'optional',
};
exports.default = (log$, opts) => {
    const pkgsDiff$ = (0, pkgsDiff_1.default)(log$, { prefix: opts.cwd });
    const summaryLog$ = log$.summary.pipe((0, operators_1.take)(1));
    return Rx.combineLatest(pkgsDiff$, summaryLog$)
        .pipe((0, operators_1.take)(1), (0, operators_1.map)(([pkgsDiff]) => {
        let msg = '';
        for (const depType of ['prod', 'optional', 'peer', 'dev', 'nodeModulesOnly']) {
            const diffs = Object.values(pkgsDiff[depType]);
            if (diffs.length > 0) {
                msg += constants_1.EOL;
                if (opts.pnpmConfig?.global) {
                    msg += chalk_1.default.cyanBright(`${opts.cwd}:`);
                }
                else {
                    msg += chalk_1.default.cyanBright(`${pkgsDiff_1.propertyByDependencyType[depType]}:`);
                }
                msg += constants_1.EOL;
                msg += printDiffs(diffs, { prefix: opts.cwd });
                msg += constants_1.EOL;
            }
            else if (opts.pnpmConfig?.[CONFIG_BY_DEP_TYPE[depType]] === false) {
                msg += constants_1.EOL;
                msg += `${chalk_1.default.cyanBright(`${pkgsDiff_1.propertyByDependencyType[depType]}:`)} skipped`;
                if (opts.env.NODE_ENV === 'production' && depType === 'dev') {
                    msg += ' because NODE_ENV is set to production';
                }
                msg += constants_1.EOL;
            }
        }
        return Rx.of({ msg });
    }));
};
function printDiffs(pkgsDiff, opts) {
    // Sorts by alphabet then by removed/added
    // + ava 0.10.0
    // - chalk 1.0.0
    // + chalk 2.0.0
    pkgsDiff.sort((a, b) => (a.name.localeCompare(b.name) * 10 + (Number(!b.added) - Number(!a.added))));
    const msg = pkgsDiff.map((pkg) => {
        let result = pkg.added
            ? outputConstants_1.ADDED_CHAR
            : outputConstants_1.REMOVED_CHAR;
        if (!pkg.realName || pkg.name === pkg.realName) {
            result += ` ${pkg.name}`;
        }
        else {
            result += ` ${pkg.name} <- ${pkg.realName}`;
        }
        if (pkg.version) {
            result += ` ${chalk_1.default.grey(pkg.version)}`;
            if (pkg.latest && semver_1.default.lt(pkg.version, pkg.latest)) {
                result += ` ${chalk_1.default.grey(`(${pkg.latest} is available)`)}`;
            }
        }
        if (pkg.deprecated) {
            result += ` ${chalk_1.default.red('deprecated')}`;
        }
        if (pkg.from) {
            result += ` ${chalk_1.default.grey(`<- ${pkg.from && path_1.default.relative(opts.prefix, pkg.from) || '???'}`)}`;
        }
        return result;
    }).join(constants_1.EOL);
    return msg;
}
//# sourceMappingURL=reportSummary.js.map