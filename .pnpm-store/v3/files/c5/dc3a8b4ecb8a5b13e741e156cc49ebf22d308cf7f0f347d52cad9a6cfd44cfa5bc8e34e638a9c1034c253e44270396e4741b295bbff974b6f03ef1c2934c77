"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const Rx = __importStar(require("rxjs"));
const operators_1 = require("rxjs/operators");
const normalize_path_1 = __importDefault(require("normalize-path"));
exports.default = (log$, opts) => {
    return Rx.combineLatest(log$.context.pipe((0, operators_1.take)(1)), log$.packageImportMethod.pipe((0, operators_1.take)(1)))
        .pipe((0, operators_1.map)(([context, packageImportMethod]) => {
        if (context.currentLockfileExists) {
            return Rx.NEVER;
        }
        let method;
        switch (packageImportMethod.method) {
            case 'copy':
                method = 'copied';
                break;
            case 'clone':
                method = 'cloned';
                break;
            case 'hardlink':
                method = 'hard linked';
                break;
            default:
                method = packageImportMethod.method;
                break;
        }
        return Rx.of({
            msg: `\
Packages are ${method} from the content-addressable store to the virtual store.
  Content-addressable store is at: ${context.storeDir}
  Virtual store is at:             ${(0, normalize_path_1.default)(path_1.default.relative(opts.cwd, context.virtualStoreDir))}`,
        });
    }));
};
//# sourceMappingURL=reportContext.js.map