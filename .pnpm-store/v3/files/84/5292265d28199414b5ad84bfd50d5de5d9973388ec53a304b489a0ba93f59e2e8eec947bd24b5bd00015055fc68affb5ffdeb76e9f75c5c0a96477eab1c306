"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkPackage = exports.UnsupportedPlatformError = exports.UnsupportedEngineError = void 0;
const core_loggers_1 = require("@pnpm/core-loggers");
const checkEngine_1 = __importStar(require("./checkEngine"));
Object.defineProperty(exports, "UnsupportedEngineError", { enumerable: true, get: function () { return checkEngine_1.UnsupportedEngineError; } });
const checkPlatform_1 = __importStar(require("./checkPlatform"));
Object.defineProperty(exports, "UnsupportedPlatformError", { enumerable: true, get: function () { return checkPlatform_1.UnsupportedPlatformError; } });
const getSystemNodeVersion_1 = require("./getSystemNodeVersion");
function packageIsInstallable(pkgId, pkg, options) {
    const warn = checkPackage(pkgId, pkg, options);
    if (warn == null)
        return true;
    core_loggers_1.installCheckLogger.warn({
        message: warn.message,
        prefix: options.lockfileDir,
    });
    if (options.optional) {
        core_loggers_1.skippedOptionalDependencyLogger.debug({
            details: warn.toString(),
            package: {
                id: pkgId,
                name: pkg.name,
                version: pkg.version,
            },
            prefix: options.lockfileDir,
            reason: warn.code === 'ERR_PNPM_UNSUPPORTED_ENGINE' ? 'unsupported_engine' : 'unsupported_platform',
        });
        return false;
    }
    if (options.engineStrict)
        throw warn;
    return null;
}
exports.default = packageIsInstallable;
function checkPackage(pkgId, manifest, options) {
    return (0, checkPlatform_1.default)(pkgId, {
        cpu: manifest.cpu ?? ['any'],
        os: manifest.os ?? ['any'],
    }) ?? ((manifest.engines == null)
        ? null
        : (0, checkEngine_1.default)(pkgId, manifest.engines, {
            node: options.nodeVersion ?? (0, getSystemNodeVersion_1.getSystemNodeVersion)(),
            pnpm: options.pnpmVersion,
        }));
}
exports.checkPackage = checkPackage;
//# sourceMappingURL=index.js.map