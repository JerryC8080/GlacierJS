"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = __importDefault(require("os"));
const Rx = __importStar(require("rxjs"));
const operators_1 = require("rxjs/operators");
const reportError_1 = __importDefault(require("../reportError"));
const formatWarn_1 = __importDefault(require("./utils/formatWarn"));
const zooming_1 = require("./utils/zooming");
// eslint-disable:object-literal-sort-keys
const LOG_LEVEL_NUMBER = {
    error: 0,
    warn: 1,
    info: 2,
    debug: 3,
};
// eslint-enable:object-literal-sort-keys
const MAX_SHOWN_WARNINGS = 5;
exports.default = (log$, opts) => {
    const maxLogLevel = LOG_LEVEL_NUMBER[opts.logLevel ?? 'info'] ?? LOG_LEVEL_NUMBER['info'];
    const reportWarning = makeWarningReporter(opts);
    return Rx.merge(log$.registry, log$.other).pipe((0, operators_1.filter)((obj) => LOG_LEVEL_NUMBER[obj.level] <= maxLogLevel &&
        (obj.level !== 'info' || !obj['prefix'] || obj['prefix'] === opts.cwd)), (0, operators_1.map)((obj) => {
        switch (obj.level) {
            case 'warn': {
                return reportWarning(obj);
            }
            case 'error':
                if (obj['prefix'] && obj['prefix'] !== opts.cwd) {
                    return Rx.of({
                        msg: `${obj['prefix']}:` + os_1.default.EOL + (0, reportError_1.default)(obj, opts.config),
                    });
                }
                return Rx.of({ msg: (0, reportError_1.default)(obj, opts.config) });
            default:
                return Rx.of({ msg: obj['message'] });
        }
    }));
};
// Sometimes, when installing new dependencies that rely on many peer dependencies,
// or when running installation on a huge monorepo, there will be hundreds or thousands of warnings.
// Printing many messages to the terminal is expensive and reduces speed,
// so pnpm will only print a few warnings and report the total number of the unprinted warnings.
function makeWarningReporter(opts) {
    let warningsCounter = 0;
    let collapsedWarnings;
    return (obj) => {
        warningsCounter++;
        if (opts.appendOnly || warningsCounter <= MAX_SHOWN_WARNINGS) {
            return Rx.of({ msg: (0, zooming_1.autozoom)(opts.cwd, obj.prefix, (0, formatWarn_1.default)(obj.message), opts) });
        }
        const warningMsg = (0, formatWarn_1.default)(`${warningsCounter - MAX_SHOWN_WARNINGS} other warnings`);
        if (!collapsedWarnings) {
            collapsedWarnings = new Rx.Subject();
            // For some reason, without using setTimeout, the warning summary is printed above the rest of the warnings
            // Even though the summary event happens last. Probably a bug in "most".
            setTimeout(() => collapsedWarnings.next({ msg: warningMsg }), 0);
            return Rx.from(collapsedWarnings);
        }
        setTimeout(() => collapsedWarnings.next({ msg: warningMsg }), 0);
        return Rx.NEVER;
    };
}
//# sourceMappingURL=reportMisc.js.map