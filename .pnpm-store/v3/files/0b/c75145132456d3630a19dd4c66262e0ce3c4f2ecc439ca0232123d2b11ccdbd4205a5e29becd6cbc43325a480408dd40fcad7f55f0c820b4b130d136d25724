/// <reference types="node" />
import { Config } from '@pnpm/config';
import * as logs from '@pnpm/core-loggers';
import { LogLevel } from '@pnpm/logger';
import * as Rx from 'rxjs';
export default function (log$: {
    context: Rx.Observable<logs.ContextLog>;
    fetchingProgress: Rx.Observable<logs.FetchingProgressLog>;
    progress: Rx.Observable<logs.ProgressLog>;
    stage: Rx.Observable<logs.StageLog>;
    deprecation: Rx.Observable<logs.DeprecationLog>;
    summary: Rx.Observable<logs.SummaryLog>;
    lifecycle: Rx.Observable<logs.LifecycleLog>;
    stats: Rx.Observable<logs.StatsLog>;
    installCheck: Rx.Observable<logs.InstallCheckLog>;
    registry: Rx.Observable<logs.RegistryLog>;
    root: Rx.Observable<logs.RootLog>;
    packageManifest: Rx.Observable<logs.PackageManifestLog>;
    peerDependencyIssues: Rx.Observable<logs.PeerDependencyIssuesLog>;
    requestRetry: Rx.Observable<logs.RequestRetryLog>;
    link: Rx.Observable<logs.LinkLog>;
    other: Rx.Observable<logs.Log>;
    hook: Rx.Observable<logs.HookLog>;
    scope: Rx.Observable<logs.ScopeLog>;
    skippedOptionalDependency: Rx.Observable<logs.SkippedOptionalDependencyLog>;
    packageImportMethod: Rx.Observable<logs.PackageImportMethodLog>;
    updateCheck: Rx.Observable<logs.UpdateCheckLog>;
}, opts: {
    appendOnly?: boolean;
    cmd: string;
    config?: Config;
    env: NodeJS.ProcessEnv;
    isRecursive: boolean;
    logLevel?: LogLevel;
    pnpmConfig?: Config;
    streamLifecycleOutput?: boolean;
    aggregateOutput?: boolean;
    throttleProgress?: number;
    width?: number;
}): Array<Rx.Observable<Rx.Observable<{
    msg: string;
}>>>;
