"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toOutput$ = exports.formatWarn = void 0;
const Rx = __importStar(require("rxjs"));
const operators_1 = require("rxjs/operators");
const ansi_diff_1 = __importDefault(require("ansi-diff"));
const constants_1 = require("./constants");
const mergeOutputs_1 = __importDefault(require("./mergeOutputs"));
const reporterForClient_1 = __importDefault(require("./reporterForClient"));
const formatWarn_1 = __importDefault(require("./reporterForClient/utils/formatWarn"));
exports.formatWarn = formatWarn_1.default;
const reporterForServer_1 = __importDefault(require("./reporterForServer"));
function default_1(opts) {
    if (opts.context.argv[0] === 'server') {
        // eslint-disable-next-line
        const log$ = Rx.fromEvent(opts.streamParser, 'data');
        const subscription = (0, reporterForServer_1.default)(log$, opts.context.config);
        return () => subscription.unsubscribe();
    }
    const outputMaxWidth = opts.reportingOptions?.outputMaxWidth ?? (process.stdout.columns && process.stdout.columns - 2) ?? 80;
    const output$ = toOutput$({
        ...opts,
        reportingOptions: {
            ...opts.reportingOptions,
            outputMaxWidth,
        },
    });
    if (opts.reportingOptions?.appendOnly) {
        const writeNext = opts.useStderr
            ? console.error.bind(console)
            : console.log.bind(console);
        const subscription = output$
            .subscribe({
            complete() { },
            error: (err) => console.error(err.message),
            next: writeNext,
        });
        return () => subscription.unsubscribe();
    }
    const diff = (0, ansi_diff_1.default)({
        height: process.stdout.rows,
        outputMaxWidth,
    });
    const subscription = output$
        .subscribe({
        complete() { },
        error: (err) => logUpdate(err.message),
        next: logUpdate,
    });
    const write = opts.useStderr
        ? process.stderr.write.bind(process.stderr)
        : process.stdout.write.bind(process.stdout);
    function logUpdate(view) {
        // A new line should always be appended in case a prompt needs to appear.
        // Without a new line the prompt will be joined with the previous output.
        // An example of such prompt may be seen by running: pnpm update --interactive
        if (!view.endsWith(constants_1.EOL))
            view += constants_1.EOL;
        write(diff.update(view));
    }
    return () => subscription.unsubscribe();
}
exports.default = default_1;
function toOutput$(opts) {
    opts = opts || {};
    const contextPushStream = new Rx.Subject();
    const fetchingProgressPushStream = new Rx.Subject();
    const progressPushStream = new Rx.Subject();
    const stagePushStream = new Rx.Subject();
    const deprecationPushStream = new Rx.Subject();
    const summaryPushStream = new Rx.Subject();
    const lifecyclePushStream = new Rx.Subject();
    const statsPushStream = new Rx.Subject();
    const packageImportMethodPushStream = new Rx.Subject();
    const installCheckPushStream = new Rx.Subject();
    const registryPushStream = new Rx.Subject();
    const rootPushStream = new Rx.Subject();
    const packageManifestPushStream = new Rx.Subject();
    const peerDependencyIssuesPushStream = new Rx.Subject();
    const linkPushStream = new Rx.Subject();
    const otherPushStream = new Rx.Subject();
    const hookPushStream = new Rx.Subject();
    const skippedOptionalDependencyPushStream = new Rx.Subject();
    const scopePushStream = new Rx.Subject();
    const requestRetryPushStream = new Rx.Subject();
    const updateCheckPushStream = new Rx.Subject();
    setTimeout(() => {
        opts.streamParser['on']('data', (log) => {
            switch (log.name) {
                case 'pnpm:context':
                    contextPushStream.next(log);
                    break;
                case 'pnpm:fetching-progress':
                    fetchingProgressPushStream.next(log);
                    break;
                case 'pnpm:progress':
                    progressPushStream.next(log);
                    break;
                case 'pnpm:stage':
                    stagePushStream.next(log);
                    break;
                case 'pnpm:deprecation':
                    deprecationPushStream.next(log);
                    break;
                case 'pnpm:summary':
                    summaryPushStream.next(log);
                    break;
                case 'pnpm:lifecycle':
                    lifecyclePushStream.next(log);
                    break;
                case 'pnpm:stats':
                    statsPushStream.next(log);
                    break;
                case 'pnpm:package-import-method':
                    packageImportMethodPushStream.next(log);
                    break;
                case 'pnpm:peer-dependency-issues':
                    peerDependencyIssuesPushStream.next(log);
                    break;
                case 'pnpm:install-check':
                    installCheckPushStream.next(log);
                    break;
                case 'pnpm:registry':
                    registryPushStream.next(log);
                    break;
                case 'pnpm:root':
                    rootPushStream.next(log);
                    break;
                case 'pnpm:package-manifest':
                    packageManifestPushStream.next(log);
                    break;
                case 'pnpm:link':
                    linkPushStream.next(log);
                    break;
                case 'pnpm:hook':
                    hookPushStream.next(log);
                    break;
                case 'pnpm:skipped-optional-dependency':
                    skippedOptionalDependencyPushStream.next(log);
                    break;
                case 'pnpm:scope':
                    scopePushStream.next(log);
                    break;
                case 'pnpm:request-retry':
                    requestRetryPushStream.next(log);
                    break;
                case 'pnpm:update-check':
                    updateCheckPushStream.next(log);
                    break;
                case 'pnpm': // eslint-disable-line
                case 'pnpm:global': // eslint-disable-line
                case 'pnpm:store': // eslint-disable-line
                case 'pnpm:lockfile': // eslint-disable-line
                    otherPushStream.next(log);
                    break;
            }
        });
    }, 0);
    let other = Rx.from(otherPushStream);
    if (opts.context.config?.hooks?.filterLog != null) {
        other = other.pipe((0, operators_1.filter)(opts.context.config.hooks.filterLog));
    }
    const log$ = {
        context: Rx.from(contextPushStream),
        deprecation: Rx.from(deprecationPushStream),
        fetchingProgress: Rx.from(fetchingProgressPushStream),
        hook: Rx.from(hookPushStream),
        installCheck: Rx.from(installCheckPushStream),
        lifecycle: Rx.from(lifecyclePushStream),
        link: Rx.from(linkPushStream),
        other,
        packageImportMethod: Rx.from(packageImportMethodPushStream),
        packageManifest: Rx.from(packageManifestPushStream),
        peerDependencyIssues: Rx.from(peerDependencyIssuesPushStream),
        progress: Rx.from(progressPushStream),
        registry: Rx.from(registryPushStream),
        requestRetry: Rx.from(requestRetryPushStream),
        root: Rx.from(rootPushStream),
        scope: Rx.from(scopePushStream),
        skippedOptionalDependency: Rx.from(skippedOptionalDependencyPushStream),
        stage: Rx.from(stagePushStream),
        stats: Rx.from(statsPushStream),
        summary: Rx.from(summaryPushStream),
        updateCheck: Rx.from(updateCheckPushStream),
    };
    const outputs = (0, reporterForClient_1.default)(log$, {
        appendOnly: opts.reportingOptions?.appendOnly,
        cmd: opts.context.argv[0],
        config: opts.context.config,
        env: opts.context.env ?? process.env,
        isRecursive: opts.context.config?.['recursive'] === true,
        logLevel: opts.reportingOptions?.logLevel,
        pnpmConfig: opts.context.config,
        streamLifecycleOutput: opts.reportingOptions?.streamLifecycleOutput,
        aggregateOutput: opts.reportingOptions?.aggregateOutput,
        throttleProgress: opts.reportingOptions?.throttleProgress,
        width: opts.reportingOptions?.outputMaxWidth,
    });
    if (opts.reportingOptions?.appendOnly) {
        return Rx.merge(...outputs)
            .pipe((0, operators_1.map)((log) => log.pipe((0, operators_1.map)((msg) => msg.msg))), (0, operators_1.mergeAll)());
    }
    return (0, mergeOutputs_1.default)(outputs);
}
exports.toOutput$ = toOutput$;
//# sourceMappingURL=index.js.map