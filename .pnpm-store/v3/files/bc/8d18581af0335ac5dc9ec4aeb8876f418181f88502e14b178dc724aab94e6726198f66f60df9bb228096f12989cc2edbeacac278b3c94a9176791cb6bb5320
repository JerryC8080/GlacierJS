import { DependenciesMeta } from '@pnpm/types';
export interface Lockfile {
    importers: Record<string, ProjectSnapshot>;
    lockfileVersion: number;
    packages?: PackageSnapshots;
    neverBuiltDependencies?: string[];
    onlyBuiltDependencies?: string[];
    overrides?: Record<string, string>;
    packageExtensionsChecksum?: string;
}
export interface ProjectSnapshot {
    specifiers: ResolvedDependencies;
    dependencies?: ResolvedDependencies;
    optionalDependencies?: ResolvedDependencies;
    devDependencies?: ResolvedDependencies;
    dependenciesMeta?: DependenciesMeta;
}
export interface PackageSnapshots {
    [packagePath: string]: PackageSnapshot;
}
/**
 * tarball hosted remotely
 */
export interface TarballResolution {
    type?: undefined;
    tarball: string;
    integrity?: string;
    registry?: string;
}
/**
 * directory on a file system
 */
export interface DirectoryResolution {
    type: 'directory';
    directory: string;
}
/**
 * Git repository
 */
export interface GitRepositoryResolution {
    type: 'git';
    repo: string;
    commit: string;
}
export declare type Resolution = TarballResolution | GitRepositoryResolution | DirectoryResolution;
export declare type LockfileResolution = Resolution | {
    integrity: string;
};
export interface PackageSnapshot {
    id?: string;
    dev?: true | false;
    optional?: true;
    requiresBuild?: true;
    prepare?: true;
    hasBin?: true;
    name?: string;
    version?: string;
    resolution: LockfileResolution;
    dependencies?: ResolvedDependencies;
    optionalDependencies?: ResolvedDependencies;
    peerDependencies?: {
        [name: string]: string;
    };
    peerDependenciesMeta?: {
        [name: string]: {
            optional: true;
        };
    };
    transitivePeerDependencies?: string[];
    bundledDependencies?: string[];
    engines?: {
        node: string;
    };
    os?: string[];
    cpu?: string[];
    deprecated?: string;
}
export interface Dependencies {
    [name: string]: string;
}
export declare type PackageBin = string | {
    [name: string]: string;
};
/** @example
 * {
 *   "foo": "registry.npmjs.org/foo/1.0.1"
 * }
 */
export interface ResolvedDependencies {
    [depName: string]: string;
}
