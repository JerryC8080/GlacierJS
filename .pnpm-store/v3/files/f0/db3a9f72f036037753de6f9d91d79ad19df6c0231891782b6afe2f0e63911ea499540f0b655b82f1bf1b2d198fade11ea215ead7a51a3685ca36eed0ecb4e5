"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryReadProjectManifest = exports.readProjectManifestOnly = exports.readProjectManifest = void 0;
const read_project_manifest_1 = __importStar(require("@pnpm/read-project-manifest")), utils = read_project_manifest_1;
const packageIsInstallable_1 = require("./packageIsInstallable");
async function readProjectManifest(projectDir, opts) {
    const { fileName, manifest, writeProjectManifest } = await (0, read_project_manifest_1.default)(projectDir);
    (0, packageIsInstallable_1.packageIsInstallable)(projectDir, manifest, opts); // eslint-disable-line @typescript-eslint/no-explicit-any
    return { fileName, manifest, writeProjectManifest };
}
exports.readProjectManifest = readProjectManifest;
async function readProjectManifestOnly(projectDir, opts) {
    const manifest = await utils.readProjectManifestOnly(projectDir);
    (0, packageIsInstallable_1.packageIsInstallable)(projectDir, manifest, opts); // eslint-disable-line @typescript-eslint/no-explicit-any
    return manifest;
}
exports.readProjectManifestOnly = readProjectManifestOnly;
async function tryReadProjectManifest(projectDir, opts) {
    const { fileName, manifest, writeProjectManifest } = await utils.tryReadProjectManifest(projectDir);
    if (manifest == null)
        return { fileName, manifest, writeProjectManifest };
    (0, packageIsInstallable_1.packageIsInstallable)(projectDir, manifest, opts); // eslint-disable-line @typescript-eslint/no-explicit-any
    return { fileName, manifest, writeProjectManifest };
}
exports.tryReadProjectManifest = tryReadProjectManifest;
//# sourceMappingURL=readProjectManifest.js.map